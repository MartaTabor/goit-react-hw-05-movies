{"version":3,"file":"static/js/399.f6dfcdee.chunk.js","mappings":"+PAGaA,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAO,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEXC,EAAAA,EAAAA,IAAU,sCAADC,OACQN,EAAO,oCAAAM,OAAmCC,EAAAA,IAChF,KAAD,EAFa,OAARN,EAAQC,EAAAM,KAAAN,EAAAO,OAAA,SAGPR,GAAQ,OAE8B,MAF9BC,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEfS,QAAQC,MAAM,uBAAsBV,EAAAQ,IAASR,EAAAQ,GAAA,yBAAAR,EAAAW,OAAA,GAAAd,EAAA,kBAGhD,gBAVqBe,GAAA,OAAAlB,EAAAmB,MAAA,KAAAC,UAAA,K,kBC0CtB,EAxCa,WACX,IAAQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,QACRkB,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA0BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCZ,EAAKa,EAAA,GAAEC,EAAQD,EAAA,GAgBtB,OAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,eAAAhC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAA8B,EAAA,OAAA/B,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEKT,EAAUK,GAAS,KAAD,EAAnC6B,EAAQ3B,EAAAM,KACde,EAAaM,EAASC,KAAKC,MAC3BpB,QAAQqB,IAAI,QAASH,GAAU3B,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAE/BS,QAAQC,MAAM,2BAA0BV,EAAAQ,IACxCgB,GAAS,GAAM,yBAAAxB,EAAAW,OAAA,GAAAd,EAAA,kBAElB,kBATkB,OAAAH,EAAAmB,MAAA,KAAAC,UAAA,KAUnBY,GACF,GAAG,CAAC5B,IAEAY,GACKqB,EAAAA,EAAAA,KAACC,EAAAA,EAAY,KAIpBD,EAAAA,EAAAA,KAAA,MAAAE,SACGb,EAAUc,KAAI,SAAAC,GAAM,OACnBC,EAAAA,EAAAA,MAAA,MAAAH,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAKE,EAAOE,QACZN,EAAAA,EAAAA,KAAA,OACEO,IAAG,mCAAAlC,OAAqC+B,EAAOI,cAC/CC,MAAO,IACPC,IAAKN,EAAOE,QAEdD,EAAAA,EAAAA,MAAA,KAAAH,SAAA,CAAG,oBAAkBE,EAAOO,eAPrBP,EAAOQ,GAQX,KAIb,C,sDC3CO,IAAMtC,EAAU,kC","sources":["utilities/CastFetch.js","components/Cast/Cast.jsx","utilities/Api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY } from './Api';\n\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.error('Error fetching cast:', error);\n    throw error;\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'utilities/CastFetch';\nimport { PageNotFound } from 'components/PageNotFound/PageNotFound';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchCastData = async () => {\n      try {\n        const castData = await fetchCast(movieId);\n        setMovieCast(castData.data.cast);\n        console.log('Cast:', castData);\n      } catch (error) {\n        console.error('Eror fetching cast data:', error);\n        setError(true);\n      }\n    };\n    fetchCastData();\n  }, [movieId]);\n\n  if (error) {\n    return <PageNotFound />;\n  }\n\n  return (\n    <ul>\n      {movieCast.map(person => (\n        <li key={person.id}>\n          <h3>{person.name}</h3>\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\n            width={250}\n            alt={person.name}\n          />\n          <p>In the movie as: {person.character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","export const API_KEY = '3e82467d5ce14883b35275ee23bc002f';\n"],"names":["fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","response","_context","prev","next","axios","concat","API_KEY","sent","abrupt","t0","console","error","stop","_x","apply","arguments","useParams","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","setError","useEffect","fetchCastData","castData","data","cast","log","_jsx","PageNotFound","children","map","person","_jsxs","name","src","profile_path","width","alt","character","id"],"sourceRoot":""}